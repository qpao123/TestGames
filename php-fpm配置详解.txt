[global]
pid = run/php-fpm.pid

error_log = /data/logs/php-fpm/error.fpm.log

log_level = notice

emergency_restart_threshold = 0  #表示在emergency_restart_interval所设值内出现SIGSEGV或者SIGBUS错误的php-cgi进程数如果超过 emergency_restart_threshold个，php-fpm就会优雅重启。这两个选项一般保持默认值。

emergency_restart_interval = 0

process.max = 300  #设置子进程最大数

daemonize = yes  #后台执行

rlimit_files = 65535  #设置文件打开描述符的rlimit限制

events.mechanism = epoll  #事件通知机制(网络I/O)


[php-fpm-001]
user = www
group = www
listen = /dev/php-fpm1.sock
listen.owner = www
listen.group = www
listen.mode = 0660
listen.backlog = 2048
listen.allowed_clients = 127.0.0.1

pm = dynamic
pm.max_children = 200
pm.start_servers = 12
pm.min_spare_servers = 12
pm.max_spare_servers = 24
pm.process_idle_timeout = 10s;
pm.max_requests = 1000
pm.status_path = /fpm_status001

[php-fpm-002]
user = www
group = www
listen = /dev/php-fpm2.sock
listen.owner = www
listen.group = www
listen.mode = 0660
listen.backlog = 2048
listen.allowed_clients = 127.0.0.1

pm = dynamic
pm.max_children = 200
pm.start_servers = 12
pm.min_spare_servers = 12
pm.max_spare_servers = 24
pm.process_idle_timeout = 10s;
pm.max_requests = 1000
pm.status_path = /fpm_status002

[php-fpm-003]
user = www
group = www
listen = /dev/php-fpm3.sock
listen.owner = www
listen.group = www
listen.mode = 0660
listen.backlog = 2048
listen.allowed_clients = 127.0.0.1

pm = dynamic
pm.max_children = 200
pm.start_servers = 12
pm.min_spare_servers = 12
pm.max_spare_servers = 24
pm.process_idle_timeout = 10s;
pm.max_requests = 1000
pm.status_path = /fpm_status003

[php-fpm-004]
user = www
group = www
listen = /dev/php-fpm4.sock
listen.owner = www
listen.group = www
listen.mode = 0660
listen.backlog = 2048 #已连接但未进行accept处理的SOCKET队列大小。注意这个值过大,fpm处理不过来，导致队列等待时间超过NGINX的proxy。过小，会拒绝nginx发过来的连接
listen.allowed_clients = 127.0.0.1 #允许FastCGI客户端连接的IPv4地址，多个地址用','分隔，为空则允许任何地址发来链接请求

pm = dynamic  #动态创建进程
pm.max_children = 200  #同一时刻能够存活的最大子进程的数量
pm.start_servers = 12  #在启动时启动的子进程数量
pm.min_spare_servers = 12 #处于空闲"idle"状态的最小子进程，如果空闲进程数量小于这个值，那么相应的子进程会被创建
pm.max_spare_servers = 24 #最大空闲子进程数量，空闲子进程数量超过这个值，那么相应的子进程会被杀掉
pm.process_idle_timeout = 10s; #空闲进程超时时间
pm.max_requests = 1000    #每个进程接受的请求最大数
pm.status_path = /fpm_status004  #配置一个URI，以便查看fpm状态页

access.log = /data/logs/php-fpm/access.fpm.log #日志路径
access.format = "%R - %u %t \"%m %r%Q%q\" %s %f %{mili}d %{kilo}M %C%%" #日志格式

slowlog = /data/logs/php-fpm/log.slow #慢请求日志
request_slowlog_timeout = 5 #当一个请求超过设置的该时间，就会将对应的PHP调用堆栈信息完整写入到慢日志中.
request_terminate_timeout = 180 #设置单个请求的超时中止时间.设置为 '0' 表示 'Off'.注意这个如果过大，会导致进程一直卡在哪里，Nginx无法处理新请求，返回502。这个值是PHP脚本最大执行时间

catch_workers_output = yes #重定向运行过程中的stdout和stderr到主要的错误日志文件中. 如果没有设置, stdout 和 stderr 将会根据FastCGI的规则被重定向到 /dev/null . 默认值: 空.
security.limit_extensions = .php #设置只能处理php后缀文件
env[HOSTNAME] = $HOSTNAME #设置php的全局变量$_ENV
env[PATH] = /usr/local/bin:/usr/bin:/bin
env[TMP] = /tmp
env[TMPDIR] = /tmp
env[TEMP] = /tmp

